services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres_tg_bot
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - bot_network

  redis:
    image: redis:7-alpine
    container_name: redis_tg_bot
    command: redis-server --appendonly yes --bind 0.0.0.0
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - bot_network

  telegram_bot:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: telegram_bot_app
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      REDIS_HOST: redis
    volumes:
      - photo_storage:/app/src/photo_storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bot_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  photo_storage:
    driver: local

networks:
  bot_network:
    driver: bridge
